on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Stage 1: Setup
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Cache das depend√™ncias do Python
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          echo "Instalando as depend√™ncias do projeto"
          pip install -r requirements.txt

      - name: Cache Allure CLI
        uses: actions/cache@v4
        with:
          path: /opt/allure
          key: allure-${{ runner.os }}-2.13.8

      - name: Install Allure CLI
        if: steps.cache.outputs.cache-hit != 'true'  # Instalar o Allure se n√£o estiver em cache
        run: |
          echo "Instalando Allure CLI"
          wget https://github.com/allure-framework/allure2/releases/download/2.13.8/allure-2.13.8.tgz
          tar -zxvf allure-2.13.8.tgz
          sudo mv allure-2.13.8 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure  # Configurar o Allure no PATH

  # Stage 2: Test
  test:
    name: Run API Tests
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Restaurar o cache do pip para evitar reinstalar depend√™ncias
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Restaurar o cache do Allure CLI
      - name: Cache Allure CLI
        uses: actions/cache@v4
        with:
          path: /opt/allure
          key: allure-${{ runner.os }}-2.13.8

      - name: Install Allure CLI (se n√£o estiver em cache)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Instalando Allure CLI novamente"
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure  # Reconfigurar o Allure no PATH

      - name: Run Robot Framework tests
        env:
          PYTHONWARNINGS: "ignore:Unverified HTTPS request"
        run: |
          echo "Executando os testes de API do Robot Framework"
          robot -d logs --listener allure_robotframework ./tests/ || true

      - name: Generate Allure Report
        run: |
          echo "Gerando o relat√≥rio do Allure"
          allure generate output/allure -o allure-report --clean

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: robot-framework-report-api
          path: allure-report/

  # Stage 3: Deploy
  deploy:
    name: Deploy to GitHub Pages üåê
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: https://marilliadantas.github.io/api-test-robot/index.html

    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: robot-framework-report-api

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./

      - name: Deploy to Github Pages
        id: deployment
        uses: actions/deploy-pages@v4